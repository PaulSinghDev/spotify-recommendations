// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String     @id @default(uuid())
  created   DateTime   @default(now())
  playlists Playlist[]
  tracks    Track[]
  artists   Artist[]
  jobs      Job[]
}

enum PlaylistStatus {
  LOADING
  READY
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum JobType {
  CREATE_PLAYLIST
  GET_DATA
  GET_RECOMMENDATIONS
}

model Job {
  id        String   @id @default(uuid())
  created   DateTime @default(now())
  updated   DateTime @updatedAt @default(now())
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  status    JobStatus
  statusMsg String?
  type      JobType
  progress  Int
  retries   Int      @default(0)
  data      Json?
}

model Playlist {
  id        String   @id @default(uuid())
  name      String
  status    PlaylistStatus @default(LOADING)
  created   DateTime       @default(now())
  cover     String
  url       String?
  isPrivate Boolean
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  tracks    Track[]
}

model Track {
  id         String         @id @default(uuid())
  created    DateTime       @default(now())
  name       String
  album      String
  cover      String
  url        String
  spotifyUri String         @unique
  duration   Int
  playlists  Playlist[]
  artists    Artist[]
  users      User[]
  features   TrackFeatures?
}

model TrackFeatures {
  id               String   @id @default(uuid())
  created          DateTime @default(now())
  trackId          String   @unique
  track            Track    @relation(fields: [trackId], references: [id])
  acousticness     Float
  danceability     Float
  energy           Float
  instrumentalness Float
  liveness         Float
  loudness         Float
  speechiness      Float
  tempo            Float
  valence          Float
}

model Artist {
  id      String   @id @default(uuid())
  created DateTime @default(now())
  name    String
  image   String?
  genres  String[]
  tracks  Track[]
  users   User[]
}
