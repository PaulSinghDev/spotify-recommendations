import {
  SpotifyCreatePlaylistResponse,
  SpotifyImageType,
} from "~/types/spotify";
import { prisma } from "../prisma/client";
import { CreatePlaylistData } from "~/types/data";
import { updateJob } from "../job-queue/update-job";
import { JobStatus } from "@prisma/client";

export const createPlaylist = async (
  jobId: string,
  accessToken: string,
  userId: string,
  data: CreatePlaylistData
) => {
  if (!data.playlistName) {
    await updateJob(jobId, {
      status: JobStatus.FAILED,
      statusMsg: "Playlist name is required",
      progress: 100,
    });

    throw new Error("Playlist name is required");
  }

  if (!data.trackUris.length) {
    await updateJob(jobId, {
      status: JobStatus.FAILED,
      statusMsg: "Track URIs are required",
      progress: 100,
    });

    throw new Error("Track URIs are required");
  }

  // Update the job status/message
  await updateJob(jobId, {
    status: JobStatus.RUNNING,
    statusMsg: "Creating playlist...",
    progress: 20,
  });

  const createPlaylistRequestUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;

  // Make the create playlist request
  const createPlaylistRequest = await fetch(createPlaylistRequestUrl, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${accessToken}`,
    },
    body: JSON.stringify({
      name: data.playlistName,
      description: "Created by Spotify recommendations",
      public: !data.isPrivatePlaylist,
    }),
  });

  // Get the response
  const createPlaylistResponse: SpotifyCreatePlaylistResponse =
    await createPlaylistRequest.json();

  // do we have an ID for the playlist?
  if (!createPlaylistResponse.id) {
    throw new Error("Failed to create playlist");
  }

  // Update the job status/message
  await updateJob(jobId, {
    status: JobStatus.RUNNING,
    statusMsg: "Adding tracks to playlist...",
    progress: 40,
  });

  // add songs to the playlist
  const updatePlaylistRequest = await fetch(
    `https://api.spotify.com/v1/playlists/${
      createPlaylistResponse.id
    }/tracks?uris=${data.trackUris.join(",")}`,
    {
      method: "PUT",
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    }
  );

  // get the response
  await updatePlaylistRequest.json();

  // Update the job status/message
  await updateJob(jobId, {
    status: JobStatus.RUNNING,
    statusMsg: "Getting playlist cover image...",
    progress: 60,
  });

  // Get the cover image which has been generated by Spotify
  const coverReq = await fetch(
    `https://api.spotify.com/v1/playlists/${createPlaylistResponse.id}/images`,
    {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    }
  );

  const coverRes: SpotifyImageType[] = await coverReq.json();

  // Update the job status/message
  await updateJob(jobId, {
    status: JobStatus.RUNNING,
    statusMsg: "Adding playlist to database...",
    progress: 80,
  });

  // add the playlist to our db
  await prisma?.playlist.create({
    data: {
      id: createPlaylistResponse.id,
      name: data.playlistName,
      url: createPlaylistResponse.href,
      cover: coverRes[0]?.url || "",
      isPrivate: data.isPrivatePlaylist,
      creator: {
        connect: {
          id: userId,
        },
      },
      tracks: {
        connect: data.trackUris.map((spotifyUri) => ({ spotifyUri })),
      },
    },
  });

  // Update the job status/message
  await updateJob(jobId, {
    status: JobStatus.COMPLETED,
    statusMsg: "Creating playlist...",
    progress: 100,
    data: {
      ...data,
      playlistUrl: createPlaylistResponse.href,
    },
  });
};
